import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
	repositories {
		mavenCentral()
	}

	ext {
		springRetry = "2.0.3"
		springAspects = "6.2.11"
		flywayCore = "9.17.0"
		caffeine = "3.1.8"
		springdoc = "2.8.13"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '7.2.1'
	id "org.flywaydb.flyway" version "9.8.1"
}

apply plugin: "org.flywaydb.flyway"

group = 'com.sporty'
description = 'Challenge to Sporty group position'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.retry:spring-retry:${springRetry}")
	implementation("org.springframework:spring-aspects:${springAspects}")

	implementation("com.github.ben-manes.caffeine:caffeine:${caffeine}")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.flywaydb:flyway-core:${flywayCore}")
	runtimeOnly("com.h2database:h2")

	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdoc}")

	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude group: 'junit'
	}
	testImplementation("org.junit.jupiter:junit-jupiter-params")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

tasks.named('test') {
	useJUnitPlatform()
}

spotless {
	java {
		target '**/*.java'
		palantirJavaFormat()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
		targetExclude('**/build/**', '**/target/**')
	}

	groovyGradle {
		target '**/*.gradle'
		greclipse()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

tasks.named('check') {
	dependsOn spotlessCheck
}

tasks.withType(Test) {
	testLogging {
		// set options for log level LIFECYCLE
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED

		// set options for log level DEBUG and INFO
		debug {
			events TestLogEvent.STARTED,
					TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.STANDARD_ERROR,
					TestLogEvent.STANDARD_OUT
		}
		info.events = debug.events
		info.showExceptions = true

		exceptionFormat = TestExceptionFormat.FULL

		afterSuite { desc, result ->
			if (!desc.parent) {
				println('-----------')
				println("${result.resultType}")
				println("Total: ${result.testCount}")
				println("Passed: ${result.successfulTestCount}")
				println("Failed: ${result.failedTestCount}")
				println("Skiped: ${result.skippedTestCount}")
				println('-----------')
			}
		}
	}
}
